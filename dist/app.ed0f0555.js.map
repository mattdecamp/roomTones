{"version":3,"sources":["js/app.js"],"names":["window","onload","document","getElementById","value","audioContext","AudioContext","webkitAudioContext","oscillator","createOscillator","type","frequency","detune","setValueAtTime","currentTime","gainNode","createGain","gain","connect","destination","gainNodeNoise","start","querySelector","addEventListener","e","target","shortcuts","getElementsByClassName","console","log","length","shortcutClick","shortcutAttr","getAttribute","oscRange","oscValue","i","onOff","disconnect","setAttribute","innerHTML","whiteBufferSize","sampleRate","noiseBuffer","createBuffer","output","getChannelData","Math","random","whiteNoise","createBufferSource","buffer","loop","volume","pinkBufferSize","pinkNoise","b0","b1","b2","b3","b4","b5","b6","node","createScriptProcessor","onaudioprocess","outputBuffer","white","brownBufferSize","brownNoise","lastOut","whiteNoiseCheck","checked","pinkNoiseCheck","brownNoiseCheck","oscLower","oscHigher","parseInt"],"mappings":"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","file":"app.ed0f0555.js","sourceRoot":"../src","sourcesContent":["// On load resets\n\nwindow.onload = function () {\n    document.getElementById(\"oscValue\").value = \"440\";\n    document.getElementById(\"oscRange\").value = 440;\n};\n\n// Initialize audio\n\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n// Create oscillator\n\nconst oscillator = audioContext.createOscillator();\noscillator.type = \"sine\";\noscillator.frequency.value = 440; // value in hertz\noscillator.detune.setValueAtTime(0, audioContext.currentTime); // value in cents\n\n// Connect Gain to Oscillator\n\nconst gainNode = audioContext.createGain();\ngainNode.gain.value = 0;\noscillator.connect(gainNode);\ngainNode.connect(audioContext.destination);\n// Connect Gain to All three types of Noise\n\nconst gainNodeNoise = audioContext.createGain();\ngainNodeNoise.gain.value = 0;\ngainNodeNoise.connect(audioContext.destination);\n\n// Start oscillator\n\noscillator.start();\n\n// Frequency control\n\ndocument.querySelector(\"#oscRange\").addEventListener(\"input\", (e) => {\n    oscillator.frequency.value = e.target.value;\n});\n\n// Frequency shortcuts\n\nconst shortcuts = document.getElementsByClassName(\"shortcut\");\nconsole.log(shortcuts.length);\n\nconst shortcutClick = function () {\n    let shortcutAttr = this.getAttribute(\"data-freq\");\n    oscillator.frequency.value = shortcutAttr;\n    oscRange.value = shortcutAttr;\n    oscValue.value = shortcutAttr;\n};\n\nfor (let i = 0; i < shortcuts.length; i++) {\n    shortcuts[i].addEventListener(\"click\", shortcutClick, false);\n}\n\n// Frequency Volume control\n\ndocument.querySelector(\"#volume\").addEventListener(\"input\", (e) => {\n    gainNode.gain.value = e.target.value * 0.01;\n});\n\n// Detune control\n\ndocument.querySelector(\"#detune\").addEventListener(\"input\", (e) => {\n    oscillator.detune.setValueAtTime(e.target.value, audioContext.currentTime);\n}); // change detuning when using the slider\n\n// Wave type selection\n//need to loop through all radio buttons and add event listener to that loop\n// document.querySelectorAll('[name=\"radio\"').addEventListener(\"click\", (e) => {\n//     oscillator.type = e.target.value;\n// });\n\n// On and Off button\n\nconst onOff = document.querySelector(\"#onOff\");\n\nonOff.addEventListener(\"click\", (e) => {\n    if (onOff.getAttribute(\"data-muted\") === \"false\") {\n        gainNode.disconnect(audioContext.destination);\n        gainNodeNoise.disconnect(audioContext.destination);\n        onOff.setAttribute(\"data-muted\", \"true\");\n        onOff.innerHTML = \"Play\";\n    } else {\n        gainNode.connect(audioContext.destination);\n        gainNodeNoise.connect(audioContext.destination);\n        onOff.setAttribute(\"data-muted\", \"false\");\n        onOff.innerHTML = \"Stop\";\n    }\n});\n\n// White Noise\n\nconst whiteBufferSize = 2 * audioContext.sampleRate,\n    noiseBuffer = audioContext.createBuffer(\n        1,\n        whiteBufferSize,\n        audioContext.sampleRate\n    ),\n    output = noiseBuffer.getChannelData(0);\nfor (let i = 0; i < whiteBufferSize; i++) {\n    output[i] = Math.random() * 2 - 1;\n}\n\nconst whiteNoise = audioContext.createBufferSource();\nwhiteNoise.buffer = noiseBuffer;\nwhiteNoise.loop = true;\nwhiteNoise.volume = 0;\nwhiteNoise.start(0);\nconsole.log(whiteNoise);\n\n// Pink Noise\n\nconst pinkBufferSize = 4096;\nconst pinkNoise = (function () {\n    let b0, b1, b2, b3, b4, b5, b6;\n    b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n    const node = audioContext.createScriptProcessor(pinkBufferSize, 1, 1);\n    node.onaudioprocess = function (e) {\n        const output = e.outputBuffer.getChannelData(0);\n        for (let i = 0; i < pinkBufferSize; i++) {\n            const white = Math.random() * 2 - 1;\n            b0 = 0.99886 * b0 + white * 0.0555179;\n            b1 = 0.99332 * b1 + white * 0.0750759;\n            b2 = 0.969 * b2 + white * 0.153852;\n            b3 = 0.8665 * b3 + white * 0.3104856;\n            b4 = 0.55 * b4 + white * 0.5329522;\n            b5 = -0.7616 * b5 - white * 0.016898;\n            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n            output[i] *= 0.11; // (roughly) compensate for gain\n            b6 = white * 0.115926;\n        }\n    };\n    return node;\n})();\n\n// Brown Noise\n\nconst brownBufferSize = 4096;\nconst brownNoise = (function () {\n    let lastOut = 0.0;\n    const node = audioContext.createScriptProcessor(brownBufferSize, 1, 1);\n    node.onaudioprocess = function (e) {\n        const output = e.outputBuffer.getChannelData(0);\n        for (let i = 0; i < brownBufferSize; i++) {\n            const white = Math.random() * 2 - 1;\n            output[i] = (lastOut + 0.02 * white) / 1.02;\n            lastOut = output[i];\n            output[i] *= 3.5; // (roughly) compensate for gain\n        }\n    };\n    return node;\n})();\n\n\n// Start White noise\n\nconst whiteNoiseCheck = document.querySelector(\"input[name=whiteNoise]\");\n\nwhiteNoiseCheck.addEventListener(\"change\", function () {\n    if (this.checked) {\n        // Checkbox is checked\n        whiteNoise.connect(gainNodeNoise);\n        gainNodeNoise.connect(audioContext.destination);\n    } else {\n        // Checkbox is not checked\n        whiteNoise.disconnect(gainNodeNoise);\n        gainNodeNoise.disconnect(audioContext.destination);\n    }\n});\n\n// Start Pink noise\n\nconst pinkNoiseCheck = document.querySelector(\"input[name=pinkNoise]\");\n\npinkNoiseCheck.addEventListener(\"change\", function () {\n    if (this.checked) {\n        // Checkbox is checked\n        pinkNoise.connect(gainNodeNoise);\n        gainNodeNoise.connect(audioContext.destination);\n    } else {\n        // Checkbox is not checked\n        pinkNoise.disconnect(gainNodeNoise);\n        gainNodeNoise.disconnect(audioContext.destination);\n    }\n});\n\n// Start Brown noise\n\nconst brownNoiseCheck = document.querySelector(\"input[name=brownNoise]\");\n\nbrownNoiseCheck.addEventListener(\"change\", function () {\n    if (this.checked) {\n        // Checkbox is checked\n        brownNoise.connect(gainNodeNoise);\n        gainNodeNoise.connect(audioContext.destination);\n    } else {\n        // Checkbox is not checked\n        brownNoise.disconnect(gainNodeNoise);\n        gainNodeNoise.disconnect(audioContext.destination);\n    }\n});\n\n\n// Noise Volume control\n\ndocument.querySelector(\"#noiseVolume\").addEventListener(\"input\", (e) => {\n    gainNodeNoise.gain.value = e.target.value * 0.01;\n});\n\n\n// Frequency button adjustment function\n\nconst oscLower = document.querySelector(\"#oscLower\");\nconst oscHigher = document.querySelector(\"#oscHigher\");\nconst oscRange = document.querySelector(\"#oscRange\");\nconst oscValue = document.querySelector(\"#oscValue\");\n\noscLower.addEventListener(\"click\", (e) => {\n    // when clicked increased the frequency level by 1\n    if (oscillator.frequency.value >= 1) {\n        oscillator.frequency.value = oscillator.frequency.value - 1;\n        oscRange.value = oscRange.value - 1;\n        oscValue.value = oscValue.value - 1;\n    } else {\n        return 1;\n    }\n});\n\noscHigher.addEventListener(\"click\", (e) => {\n    if (oscillator.frequency.value <= 20000) {\n        oscillator.frequency.value = oscillator.frequency.value + 1;\n        oscRange.value = parseInt(oscRange.value) + 1;\n        oscValue.value = parseInt(oscValue.value) + 1;\n    } else {\n        return;\n    }\n});\n"]}