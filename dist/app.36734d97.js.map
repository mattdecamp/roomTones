{"version":3,"sources":["js/app.js"],"names":["window","onload","document","getElementById","value","audioContext","AudioContext","webkitAudioContext","oscillator","createOscillator","type","frequency","detune","setValueAtTime","currentTime","gainNode","createGain","gain","connect","destination","start","querySelector","addEventListener","e","target","whiteBufferSize","sampleRate","noiseBuffer","createBuffer","output","getChannelData","i","Math","random","whiteNoise","createBufferSource","buffer","loop","pinkBufferSize","pinkNoise","b0","b1","b2","b3","b4","b5","b6","node","createScriptProcessor","onaudioprocess","outputBuffer","white","brownBufferSize","brownNoise","lastOut","whiteNoiseCheck","checked","disconnect","pinkNoiseCheck","brownNoiseCheck","onOff","getAttribute","setAttribute","innerHTML","oscLower","oscHigher","oscRange","oscValue","parseInt"],"mappings":"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","file":"app.36734d97.js","sourceRoot":"../src","sourcesContent":["// On load resets\n\nwindow.onload = function () {\n    document.getElementById(\"oscValue\").value = \"440\";\n    document.getElementById(\"oscRange\").value = 440;\n};\n\n// Initialize audio\n\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n// Create oscillator\n\nconst oscillator = audioContext.createOscillator();\noscillator.type = \"sine\";\noscillator.frequency.value = 440; // value in hertz\noscillator.detune.setValueAtTime(0, audioContext.currentTime); // value in cents\n\n// Establish gain\n\nconst gainNode = audioContext.createGain();\ngainNode.gain.value = 0;\noscillator.connect(gainNode);\ngainNode.connect(audioContext.destination);\n\n// Start oscillator\n\noscillator.start();\n\n// Frequency control\n\ndocument.querySelector(\"#oscRange\").addEventListener(\"input\", (e) => {\n    oscillator.frequency.value = e.target.value;\n});\n\n// Volume control\n\ndocument.querySelector(\"#volume\").addEventListener(\"input\", (e) => {\n    gainNode.gain.value = e.target.value * 0.01;\n});\n\n// Detune control\n\ndocument.querySelector(\"#detune\").addEventListener(\"input\", (e) => {\n    oscillator.detune.setValueAtTime(e.target.value, audioContext.currentTime);\n}); // change detuning when using the slider\n\n// Wave type selection\n\ndocument.querySelector(\"#wave\").addEventListener(\"change\", (e) => {\n    oscillator.type = e.target.value;\n});\n\n// White Noise\n\nconst whiteBufferSize = 2 * audioContext.sampleRate,\n    noiseBuffer = audioContext.createBuffer(\n        1,\n        whiteBufferSize,\n        audioContext.sampleRate\n    ),\n    output = noiseBuffer.getChannelData(0);\nfor (let i = 0; i < whiteBufferSize; i++) {\n    output[i] = Math.random() * 2 - 1;\n}\n\nconst whiteNoise = audioContext.createBufferSource();\nwhiteNoise.buffer = noiseBuffer;\nwhiteNoise.loop = true;\nwhiteNoise.start(0);\n\n// Pink Noise\n\nconst pinkBufferSize = 4096;\nconst pinkNoise = (function () {\n    let b0, b1, b2, b3, b4, b5, b6;\n    b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n    const node = audioContext.createScriptProcessor(pinkBufferSize, 1, 1);\n    node.onaudioprocess = function (e) {\n        const output = e.outputBuffer.getChannelData(0);\n        for (let i = 0; i < pinkBufferSize; i++) {\n            const white = Math.random() * 2 - 1;\n            b0 = 0.99886 * b0 + white * 0.0555179;\n            b1 = 0.99332 * b1 + white * 0.0750759;\n            b2 = 0.969 * b2 + white * 0.153852;\n            b3 = 0.8665 * b3 + white * 0.3104856;\n            b4 = 0.55 * b4 + white * 0.5329522;\n            b5 = -0.7616 * b5 - white * 0.016898;\n            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n            output[i] *= 0.11; // (roughly) compensate for gain\n            b6 = white * 0.115926;\n        }\n    };\n    return node;\n})();\n\n// Brown Noise\n\nconst brownBufferSize = 4096;\nconst brownNoise = (function () {\n    let lastOut = 0.0;\n    const node = audioContext.createScriptProcessor(brownBufferSize, 1, 1);\n    node.onaudioprocess = function (e) {\n        const output = e.outputBuffer.getChannelData(0);\n        for (let i = 0; i < brownBufferSize; i++) {\n            const white = Math.random() * 2 - 1;\n            output[i] = (lastOut + 0.02 * white) / 1.02;\n            lastOut = output[i];\n            output[i] *= 3.5; // (roughly) compensate for gain\n        }\n    };\n    return node;\n})();\n\n// Start White noise\n\nconst whiteNoiseCheck = document.querySelector(\"input[name=whiteNoise]\");\n\nwhiteNoiseCheck.addEventListener(\"change\", function () {\n    if (this.checked) {\n        // Checkbox is checked..\n        whiteNoise.connect(audioContext.destination);\n    } else {\n        // Checkbox is not checked..\n        whiteNoise.disconnect(audioContext.destination);\n    }\n});\n\n// Start Pink noise\n\nconst pinkNoiseCheck = document.querySelector(\"input[name=pinkNoise]\");\n\npinkNoiseCheck.addEventListener(\"change\", function () {\n    if (this.checked) {\n        // Checkbox is checked..\n        pinkNoise.connect(audioContext.destination);\n    } else {\n        // Checkbox is not checked..\n        pinkNoise.disconnect(audioContext.destination);\n    }\n});\n\n// Start Brown noise\n\nconst brownNoiseCheck = document.querySelector(\"input[name=brownNoise]\");\n\nbrownNoiseCheck.addEventListener(\"change\", function () {\n    if (this.checked) {\n        // Checkbox is checked..\n        brownNoise.connect(audioContext.destination);\n    } else {\n        // Checkbox is not checked..\n        brownNoise.disconnect(audioContext.destination);\n    }\n});\n\n// On and Off button\n\nconst onOff = document.querySelector(\"#onOff\");\n\nonOff.addEventListener(\"click\", (e) => {\n    if (onOff.getAttribute(\"data-muted\") === \"false\") {\n        gainNode.disconnect(audioContext.destination);\n        onOff.setAttribute(\"data-muted\", \"true\");\n        onOff.innerHTML = \"Turn On\";\n    } else {\n        gainNode.connect(audioContext.destination);\n        onOff.setAttribute(\"data-muted\", \"false\");\n        onOff.innerHTML = \"Turn Off\";\n    }\n});\n\n// Frequency button adjustment function\n\nconst oscLower = document.querySelector(\"#oscLower\");\nconst oscHigher = document.querySelector(\"#oscHigher\");\nconst oscRange = document.querySelector(\"#oscRange\");\nconst oscValue = document.querySelector(\"#oscValue\");\n\noscLower.addEventListener(\"click\", (e) => {\n    // when clicked increased the frequency level by 1\n    if (oscillator.frequency.value >= 1) {\n        oscillator.frequency.value = oscillator.frequency.value - 1;\n        oscRange.value = oscRange.value - 1;\n        oscValue.value = oscValue.value - 1;\n    } else {\n        return 1;\n    }\n});\n\noscHigher.addEventListener(\"click\", (e) => {\n    if (oscillator.frequency.value <= 20000) {\n        oscillator.frequency.value = oscillator.frequency.value + 1;\n        oscRange.value = parseInt(oscRange.value) + 1;\n        oscValue.value = parseInt(oscValue.value) + 1; \n    } else {\n        return;\n    }\n});\n"]}